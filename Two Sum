// Brute Force :

class Solution {
public:
vector<int> two_sum(vector<int> &numbers, int target) {
        
    int n=numbers.size();
   vector<int> v2;
   v2=numbers;
   
    sort(numbers.begin(),numbers.end());
   
    vector<int> v3;
    int i=0,j=n-1;
   while(i!=j)
    {
          // cout<<"i="<<i<<"\tj="<<j<<"\tn="<<n<<endl;
            if(numbers[i]+numbers[j]==target)
            {
                 int counter=0;
                for(int m=0;m<n;m++)
                {
                    if(counter<2){
                    if(v2[m]==numbers[i] || v2[m]==numbers[j]){
                         v3.push_back(m);
                         counter++;
                    }
                    }
                }
                
                return v3;
            }
            else if (numbers[i]+numbers[j] > target)
                j--;
            else
                i++;

    }
    v3.push_back(-1);
    v3.push_back(-1);
    return v3;
 }
};



// Optimized Solution using Hash Map:

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        
        unordered_map<int,int> mp;

    for(int i=0; i<nums.size(); i++)
    {
        // find the key
        auto it = mp.find(nums[i]);
        if(it == mp.end())
        {
            mp.insert({target-nums[i],i});
        }
        else
        {
               return{i,it->second};
        }
         
    }

    return{-1,-1};
    }
};
