T(n) = O(n * log n)
S(n) = O(1)
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.rbegin(),nums.rend());  //O(n log n)
        return nums[k-1];                 //O(1)
    }
};

T(n) = O(n * log n)
S(n) = O(n)
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        
        priority_queue<int> pq;
        
        for(int i=0;i<nums.size();i++)
            pq.push(nums[i]);
        
        int ret;
        int j=1;
        
        while(!pq.empty() && j<k)
	    {
                pq.top();
                pq.pop();
            j++;
	    }
	    ret=pq.top();
        pq.pop();
	    return ret;
        
    }
};
